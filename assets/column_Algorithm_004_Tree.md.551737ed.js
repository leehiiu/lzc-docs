import{_ as s,o as n,c as a,N as l}from"./chunks/framework.0173b754.js";const i=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"column/Algorithm/004_Tree.md"}'),o={name:"column/Algorithm/004_Tree.md"},p=l(`<h4 id="深度优先遍历-dfs" tabindex="-1">深度优先遍历（DFS） <a class="header-anchor" href="#深度优先遍历-dfs" aria-label="Permalink to &quot;深度优先遍历（DFS）&quot;">​</a></h4><p>深度优先遍历沿着树的深度方向尽可能深地探索，直到到达叶子节点，然后回溯以探索其他分支。DFS主要有三种形式：前序遍历、中序遍历和后序遍历，这取决于访问节点的顺序。</p><h6 id="前序遍历-先访问根节点-然后递归遍历左子树-最后遍历右子树。" tabindex="-1">前序遍历：先访问根节点，然后递归遍历左子树，最后遍历右子树。 <a class="header-anchor" href="#前序遍历-先访问根节点-然后递归遍历左子树-最后遍历右子树。" aria-label="Permalink to &quot;前序遍历：先访问根节点，然后递归遍历左子树，最后遍历右子树。&quot;">​</a></h6><p>根 -&gt; 左 -&gt; 右 中序遍历：先递归遍历左子树，然后访问根节点，最后遍历右子树。</p><p>左 -&gt; 根 -&gt; 右 后序遍历：先递归遍历左子树和右子树，最后访问根节点。</p><p>左 -&gt; 右 -&gt; 根 广度优先遍历（BFS） 广度优先遍历则是从树的根开始，一层一层地逐层访问所有节点。它使用队列来实现，首先访问根节点，然后将根节点的所有子节点加入队列，之后依次从队列中取出节点并访问其子节点，再将这些子节点加入队列，以此类推。</p><p>队列: [根] 访问根节点 -&gt; 队列: [左子, 右子] 访问左子 -&gt; 队列: [右子, 左子的子节点们...] ... 实现示例（Python） 假设有一棵二叉树的节点定义如下：</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TreeNode</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">left</span><span style="color:#89DDFF;">=None,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">right</span><span style="color:#89DDFF;">=None):</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> value</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">left</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> left</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">right</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> right</span></span>
<span class="line"><span style="color:#A6ACCD;">深度优先遍历（递归实现）</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">dfs_preorder</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> root</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">root</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">dfs_preorder</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">root</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">left</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">dfs_preorder</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">root</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">right</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">dfs_inorder</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> root</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">dfs_inorder</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">root</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">left</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">root</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">dfs_inorder</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">root</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">right</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">dfs_postorder</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> root</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">dfs_postorder</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">root</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">left</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">dfs_postorder</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">root</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">right</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">root</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#### 广度优先遍历</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> collections </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> deque</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bfs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> root</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#A6ACCD;">    queue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">deque</span><span style="color:#89DDFF;">([</span><span style="color:#82AAFF;">root</span><span style="color:#89DDFF;">])</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> queue</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        node </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">popleft</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">node</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">left</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">node</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">left</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">right</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">node</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">right</span><span style="color:#89DDFF;">)</span></span></code></pre></div>`,8),e=[p];function t(r,c,F,D,y,A){return n(),a("div",null,e)}const f=s(o,[["render",t]]);export{i as __pageData,f as default};
